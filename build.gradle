import org.ifcx.parsing.CharniakParser
import org.ifcx.parsing.ConvertManyPTB
import org.ifcx.parsing.EnsembleParser
import org.ifcx.parsing.SetUpParser

//evaluationDependsOnChildren()

evaluationDependsOn(':corpora')
evaluationDependsOn(':corpora:anydomain')
evaluationDependsOn(':corpora:anydomain:WSJ')

//println project
//println project(':corpora:anydomain:WSJ')
//println project(':corpora:anydomain:WSJ').tasks

apply plugin: 'base'

apply from: 'converters.gradle'

project('wsj_only') {
    new CharniakParser(it).with {
        corpus_name = ':corpora:anydomain:WSJ'
        base_parser_dir = project.rootProject.file('bllip-parser')
        createTasks()
        createTasksForCorpus('test', project.project(':corpora:anydomain:WSJ').tasks.test_MRG)
    }
}

project('ensemble_wsj_uni') {
    def _ensemble = new EnsembleParser(ensemble_project: project, corpus_name:':corpora:anydomain:WSJ', split_method: 'uni')
    _ensemble.createTasks()

    task clean_setup << {
        ant.delete {
            set_up.outputs.files.addToAntBuilder(ant, 'resources')
        }
    }

    task list_parsers {
        project.childProjects.sort { it.key }.each { println it }
    }
}

task setup_wsj_only (type:SetUpParser) {
    dependsOn 'corpora:anydomain:WSJ:train_MRG'
    dependsOn 'corpora:anydomain:WSJ:tune_MRG'
//    dependsOn 'corpora:anydomain:WSJ:test_MRG'

    base_parser_dir = file('bllip-parser')
    corpus_name = 'corpora:anydomain:WSJ'
    parser_dir = file('wsj_only')
}

//task train_wsj_only(type:Exec) {
//    dependsOn setup_wsj_only
//
//    def model_dir = 'first-stage/DATA/EN'
//
//    outputs.files model_dir
//
//    // first-stage/TRAIN/allScript first-stage/DATA/EN tmp/train-all.mrg tmp/dev-all.mrg
//    workingDir setup_wsj_only.parser_dir
//    executable 'first-stage/TRAIN/allScript'
//    args([model_dir, setup_wsj_only.train_all_mrg, setup_wsj_only.tune_all_mrg])
//
//    ignoreExitValue false
//}


task train_wsj_only(dependsOn:setup_wsj_only) << {
    ant.exec(executable:'first-stage/TRAIN/allScript', dir:setup_wsj_only.parser_dir, failonerror:true) {
        arg(file:setup_wsj_only.model_dir)
        arg(file:setup_wsj_only.train_all_mrg)
        arg(file:setup_wsj_only.tune_all_mrg)
    }
}


allprojects {
//     println project
    task show << { t -> logger.warn "project ${project.absoluteProjectPath(t.name)}" }
}

task list_projects << {
    allprojects.each { println it }
}
